# Prepare for release workflow
#  - Increment the version number from the latest tag
#  - Determine which source branch is appropriate to base the release off.
#    (main branch for major & minor releases and latest release branch for patch releases)
#  - Create:
#    - a release branch (for major & minor release)
#    - a tag the release branch using the version number determined by previous step.
#    - a GitHub release

name: Prepare release
on:
  workflow_call:
    inputs:
      release_type:
        description: 'Is this release a major, minor, or patch release? See https://semver.org for definitions.'
        required: true
        default: 'minor'
        type: string
    outputs:
      release_version:
        description: 'The new version number'
        value: ${{ jobs.bump-version.outputs.new_version }}
      release_branch:
        description: 'The name of the release branch'
        value: ${{ jobs.prepare-release.outputs.release_branch }}

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.increment-version.outputs.new_version }}
    steps:
      - name: Checkout the branch the workflow is run from
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          persist-credentials: false

      - name: Authenticate with github
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Increment version from the latest tag
        id: increment-version
        run: |
          version=$(git tag --sort=creatordate | tail -1)
          IFS='.' read -r major minor patch <<< "${version:1}"
          if [[ "${{ inputs.release_type }}" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "${{ inputs.release_type }}" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "${{ inputs.release_type }}" == "patch" ]]; then
            patch=$((patch + 1))
          else
            echo "Error: Unknown release type ${{ inputs.release_type }}"
            exit 1
          fi
          new_version="v${major}.${minor}.${patch}"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "Bump version $version ---> $new_version"


  prepare-release:
    needs: bump-version
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_VERSION: ${{ needs.bump-version.outputs.new_version }}
      IS_PATCH_RELEASE: ${{ inputs.release_type == 'patch' }}
    outputs:
      release_branch: ${{ steps.prepare-release-branch.outputs.release_branch }}
    steps:
      - name: Checkout all git history & branches
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get source branch
        id: get-source-branch
        run: |
          if [ "$IS_PATCH_RELEASE" == "true" ]; then
            latest_release_branch=$(git branch -r | grep 'release/' | sort -V | tail -1 | sed 's/origin\///' | xargs echo -n)
            echo "source_branch=$latest_release_branch" >> $GITHUB_OUTPUT
            echo "source_branch=$latest_release_branch"
          else
            echo "source_branch=main" >> $GITHUB_OUTPUT
            echo "source_branch=main"
          fi

      - name: Authenticate with github
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:$GITHUB_TOKEN@github.com/${{ github.repository }}

      - name: Prepare release branch
        id: prepare-release-branch
        continue-on-error: true
        env:
          SOURCE_BRANCH: ${{ steps.get-source-branch.outputs.source_branch }}
        run: |
          git checkout $SOURCE_BRANCH
          if [ "$IS_PATCH_RELEASE" = "true" ]; then
            echo "This is a patch release."
            echo "release_branch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
          else
            echo "This is not a patch release."
            if git show-ref --verify --quiet refs/heads/release/$RELEASE_VERSION; then
              git push origin --delete release/$RELEASE_VERSION
            fi
            git checkout -b release/$RELEASE_VERSION
            git push origin release/$RELEASE_VERSION
            echo "release_branch=release/$RELEASE_VERSION" >> $GITHUB_OUTPUT
          fi
          git checkout $release_branch
          git tag $RELEASE_VERSION
          git push origin $RELEASE_VERSION

      - name: Create GitHub release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.bump-version.outputs.new_version }}
          release_name: Release ${{ needs.bump-version.outputs.new_version }}
          body: |
            Release ${{ needs.bump-version.outputs.new_version }}
          draft: false
          prerelease: false
