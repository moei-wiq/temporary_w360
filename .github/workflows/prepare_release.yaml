name: Prepare release
# Create release branch and determine the next version number
on:
  workflow_call:
    inputs:
      release_type:
        description: 'Is this release a major, minor, or patch release? See https://semver.org for definitions.'
        required: true
        default: 'minor'
        type: string
    outputs:
      release_version:
        description: 'The new version number'
        value: ${{ jobs.bump-version.outputs.new_version }}
      release_branch:
        description: 'The name of the release branch'
        value: ${{ jobs.prepare-release.outputs.release_branch }}

jobs:
  validate-source-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Validate source branch
        run: |
          if [[ "${{ github.event.inputs.release_type }}" != "patch" && "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "Error: Can only create major/minor release from the main branch"
            exit 1
          elif [[ "${{ github.event.inputs.release_type }}" == "patch" && ("${{ github.ref }}" != refs/heads/release/* || "${{ github.ref }}" != refs/tags/*)]]; then
            echo "Error: Can only create patch release from a release branch or an existing tag"
            exit 1
          fi

  bump-version:
    needs: validate-source-branch
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.increment-version.outputs.new_version }}
    steps:
      - name: Checkout the branch the workflow is run from
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          persist-credentials: false

      - name: Authenticate with github
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Increment version from the latest tag
        id: increment-version
        run: |
          version=$(git tag --sort=creatordate | tail -1)
          IFS='.' read -r major minor patch <<< "${version:1}"
          if [[ "${{ github.event.inputs.release_type }}" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "${{ github.event.inputs.release_type }}" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "${{ github.event.inputs.release_type }}" == "patch" ]]; then
            patch=$((patch + 1))
          else
            echo "Error: Unknown release type ${{ github.event.inputs.release_type }}"
            exit 1
          fi
          new_version="v${major}.${minor}.${patch}"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "Bump version $version ---> $new_version"


  prepare-release:
    needs: bump-version
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_VERSION: ${{ needs.bump-version.outputs.new_version }}
    outputs:
      release_branch: ${{ steps.prepare-release-branch.outputs.release_branch }}
    steps:
      - name: Checkout the branch the workflow is run from
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          persist-credentials: false
          fetch-depth: 0

      - name: Authenticate with github
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:$GITHUB_TOKEN@github.com/${{ github.repository }}

      - name: Prepare release branch
        id: prepare-release-branch
        continue-on-error: true
        env:
          IS_PATCH_RELEASE: ${{ inputs.release_type == 'patch' }}
          CURRENT_BRANCH: ${{ github.ref }}
        run: |
          if [ "$IS_PATCH_RELEASE" = "true" ]; then
            echo "This is a patch release."
            echo "release_branch=$CURRENT_BRANCH" >> $GITHUB_OUTPUT
          else
            echo "This is not a patch release."
            if git show-ref --verify --quiet refs/heads/release/$RELEASE_VERSION; then
              git push origin --delete release/$RELEASE_VERSION
            fi
            git checkout -b release/$RELEASE_VERSION
            git push origin release/$RELEASE_VERSION
            echo "release_branch=release/$RELEASE_VERSION" >> $GITHUB_OUTPUT
          fi
          git tag $RELEASE_VERSION
          git push origin $RELEASE_VERSION
          
      - name: Create GitHub release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.bump-version.outputs.new_version }}
          release_name: Release ${{ needs.bump-version.outputs.new_version }}
          body: |
            Release ${{ needs.bump-version.outputs.new_version }}
          draft: false
          prerelease: false
