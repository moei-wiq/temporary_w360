name: Deploy to selected environment

on:
  workflow_call:
    inputs:
      env:
        description: 'Which environment to deploy to'
        required: true
        default: 'dev'
        type: string
      release_version:
        description: 'The version that will be deployed'
        required: false
        default: 'latest'
        type: string
      release_branch:
        description: 'The release branch that will be deployed'
        required: false
        default: ${{ github.ref }}
        type: string
      release_type:
        description: 'Is this release a major, minor, or patch release? See https://semver.org for definitions.'
        required: false
        default: 'minor'
        type: string
      run_check_only:
        description: 'Run check only without deploying?'
        required: false
        default: false
        type: boolean
      cleanup_failed_deployment:
        description: 'Cleanup failed deployment?'
        required: false
        default: false
        type: boolean

jobs:
  get-release-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-release-version.outputs.version }}
    steps:
      - name: Checkout the branch the workflow is run from
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release version
        id: get-release-version
        run: |
          if [ "${{ inputs.release_version }}" != "latest" ]; then
            version=${{ inputs.release_version }}
          else
            version=$(git tag --sort=creatordate | tail -1)
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Latest version: $version"

  run-checks:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout source branch
        if: ${{ inputs.env != 'prod' }}
        uses: actions/checkout@v4

      - name: Checkout release branch
        if: ${{ inputs.env == 'prod' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.release_branch }}

#      - id: auth
#        uses: google-github-actions/auth@v2
#        with:
#          project_id: "gcp-wow-wiq-008-${{ inputs.env }}"
#          workload_identity_provider: "projects/493273391016/locations/global/workloadIdentityPools/wiqlabs-dev-github1-ip/providers/wiqlabs-devgithub1-pi"
#          service_account: "sa-wiqlabs-project-deployer@gcp-wow-corp-infra-qrtl-prod.iam.gserviceaccount.com"
#          token_format: access_token

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        id: init
        working-directory: ./infrastructure/${{ inputs.env }}
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ./infrastructure/${{ inputs.env }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./infrastructure/${{ inputs.env }}
        run: terraform plan -no-color -lock=false


  deploy:
    needs: [run-checks, get-release-version]
    if: ${{ !inputs.run_check_only }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.env }}
    env:
      RELEASE_VERSION: ${{ needs.get-release-version.outputs.version }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_BRANCH: ${{ inputs.release_branch }}
    steps:
      - name: Checkout source branch
        if: ${{ inputs.env != 'prod' }}
        uses: actions/checkout@v4

      - name: Checkout release branch
        if: ${{ inputs.env == 'prod' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.release_branch }}

#      - id: auth
#        uses: google-github-actions/auth@v2
#        with:
#          project_id: "gcp-wow-wiq-008-${{ inputs.env }}"
#          workload_identity_provider: "projects/493273391016/locations/global/workloadIdentityPools/wiqlabs-dev-github1-ip/providers/wiqlabs-devgithub1-pi"
#          service_account: "sa-wiqlabs-project-deployer@gcp-wow-corp-infra-qrtl-prod.iam.gserviceaccount.com"
#          token_format: access_token

      # we need poetry when terraform runs zip_and_upload_artifact.sh
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.8.3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./infrastructure/${{ inputs.env }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ./infrastructure/${{ inputs.env }}
        run: terraform apply -auto-approve

  cleanup-failed-deployment:
    needs: [deploy, get-release-version]
    runs-on: ubuntu-latest
    if: ${{ failure() && inputs.env == 'prod' && inputs.cleanup_failed_deployment}}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_VERSION: ${{ needs.get-release-version.outputs.version }}
      RELEASE_BRANCH: ${{ inputs.release_branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Delete GitHub release
        continue-on-error: true
        run: |
          release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_VERSION \
            | jq -r '.id')
          if [ "$release_id" != "null" ]; then
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/releases/$release_id
            echo "Release $RELEASE_VERSION deleted."
          else
            echo "Release $RELEASE_VERSION not found."
          fi

      - name: Delete Git tag
        continue-on-error: true
        run: |
          echo "Release version: $RELEASE_VERSION"
          git push --delete origin $RELEASE_VERSION

      - name: Delete release branch
        if: ${{ inputs.release_type != 'patch' }}
        continue-on-error: true
        run: |
          git push origin --delete $RELEASE_BRANCH

      - name: Fail job
        run: exit 1
