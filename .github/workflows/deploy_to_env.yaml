name: Deploy to selected environment

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Which environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - uat
          - prod
      version:
        description: 'The version that will be deployed'
        required: true
        default: 'v0.0.0'
        type: string
      delete_release_branch_on_failure:
        description: 'Whether to delete release branch if deployment fails'
        required: true
        default: true
        type: boolean
      manual_call:
        description: 'Set to true if this is triggered manually'
        type: boolean
        required: false
        default: true
  workflow_call:
    inputs:
      env:
        description: 'Which environment to deploy to'
        required: true
        default: 'dev'
        type: string
      version:
        description: 'The version that will be deployed'
        required: true
        default: 'v0.0.0'
        type: string
      delete_release_branch_on_failure:
        description: 'Whether to delete release branch if deployment fails'
        required: true
        default: true
        type: boolean
      manual_call:
        description: 'To distinguish workflow_call from workflow_dispatch'
        type: boolean
        required: false
        default: false

jobs:
  validate-source-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Validate source branch
        run: |
          if ${{ inputs.manual_call }} && [[ "${{ inputs.env }}" == "prod" && "${{ github.ref }}" != refs/heads/release/* ]]; then
            echo "Error: Can only deploy from existing release/* branches in production"
            exit 1
          fi

  run-checks:
    needs: [ validate-source-branch ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source branch
        if: ${{ inputs.env != 'prod' }}
        uses: actions/checkout@v4

      - name: Checkout release branch
        if: ${{ inputs.env == 'prod' }}
        uses: actions/checkout@v4
        with:
          ref: release/${{ inputs.version }}

#      - id: auth
#        uses: google-github-actions/auth@v2
#        with:
#          project_id: "gcp-wow-wiq-008-${{ inputs.env }}"
#          workload_identity_provider: "projects/493273391016/locations/global/workloadIdentityPools/wiqlabs-dev-github1-ip/providers/wiqlabs-devgithub1-pi"
#          service_account: "sa-wiqlabs-project-deployer@gcp-wow-corp-infra-qrtl-prod.iam.gserviceaccount.com"
#          token_format: access_token

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        id: init
        working-directory: ./infrastructure/${{ inputs.env }}
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ./infrastructure/${{ inputs.env }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./infrastructure/${{ inputs.env }}
        run: terraform plan -no-color -lock=false


  deploy:
    needs: [ run-checks ]
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.env }}
    env:
      RELEASE_VERSION: ${{ inputs.version }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_BRANCH: release/${{ inputs.version }}
    steps:
      - name: Checkout source branch
        if: ${{ inputs.env != 'prod' }}
        uses: actions/checkout@v4

      - name: Checkout release branch
        if: ${{ inputs.env == 'prod' }}
        uses: actions/checkout@v4
        with:
          ref: release/${{ inputs.version }}

#      - id: auth
#        uses: google-github-actions/auth@v2
#        with:
#          project_id: "gcp-wow-wiq-008-${{ inputs.env }}"
#          workload_identity_provider: "projects/493273391016/locations/global/workloadIdentityPools/wiqlabs-dev-github1-ip/providers/wiqlabs-devgithub1-pi"
#          service_account: "sa-wiqlabs-project-deployer@gcp-wow-corp-infra-qrtl-prod.iam.gserviceaccount.com"
#          token_format: access_token

      # we need poetry when terraform runs zip_and_upload_artifact.sh
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.8.3

      - name: Create GitHub release
        if: ${{ inputs.env == 'prod' }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ inputs.version }}
          release_name: Release ${{ inputs.version }}
          body: |
            Release ${{ inputs.version }}
          draft: false
          prerelease: false

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./infrastructure/${{ inputs.env }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ./infrastructure/${{ inputs.env }}
        run: echo "terraform apply -auto-approve"

  cleanup-failed-deployment:
    needs: [ deploy ]
    runs-on: ubuntu-latest
    if: failure() && ${{ inputs.env == 'prod' }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_VERSION: ${{ inputs.version }}
      RELEASE_BRANCH: release/${{ inputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Delete GitHub release
        continue-on-error: true
        run: |
          release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_VERSION \
            | jq -r '.id')
          if [ "$release_id" != "null" ]; then
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/releases/$release_id
            echo "Release $RELEASE_VERSION deleted."
          else
            echo "Release $RELEASE_VERSION not found."
          fi
      - name: Delete Git tag
        continue-on-error: true
        run: |
          echo "Release version: $RELEASE_VERSION"
          git push --delete origin $RELEASE_VERSION

      - name: Delete release branch
        if: ${{ inputs.delete_release_branch_on_failure }}
        continue-on-error: true
        run: |
          git push origin --delete $RELEASE_BRANCH