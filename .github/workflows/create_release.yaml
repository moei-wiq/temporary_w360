name: Create Release
run-name: Create release for${{ github.event.release.tag_name }} by ${{ github.actor }}
on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Is this release a major, minor, or patch release? See https://semver.org for definitions.'
        required: true
        default: 'minor'
        type: choice
        options:
            - major
            - minor

jobs:
  validate-source-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Validate source branch
        run: |
          if [[ "${{ github.event.inputs.release_type }}" != "patch" && "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "Error: Can only create/update release from the main branch for non-patch releases"
            exit 1
          elif [[ "${{ github.event.inputs.release_type }}" == "patch" && ! "${{ github.ref }}" =~ ^refs/heads/release/ ]]; then
            echo "Error: Can only create patch releases from existing release/* branches"
            exit 1
          fi


  bump-version:
    needs: validate-source-branch
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.increment-version.outputs.new_version }}
    steps:
      - name: Checkout the branch the workflow is run from
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          persist-credentials: false

      - name: Authenticate with github
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Increment version
        id: increment-version
        run: |
          version=$(git tag --sort=creatordate | tail -1)
          IFS='.' read -r major minor patch <<< "${version:1}"
          if [[ "${{ github.event.inputs.release_type }}" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "${{ github.event.inputs.release_type }}" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "${{ github.event.inputs.release_type }}" == "patch" ]]; then
            patch=$((patch + 1))
          else
            echo "Error: Unknown release type ${{ github.event.inputs.release_type }}"
            exit 1
          fi
          new_version="v${major}.${minor}.${patch}"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "Bump version $version ---> $new_version"




  create-release:
    needs: bump-version
    if: ${{ github.event.inputs.release_type != 'patch' }}
    runs-on: ubuntu-latest
    outputs:
      release_branch: ${{ steps.create-release-branch.outputs.release_branch }}
    steps:
      - name: Checkout the branch the workflow is run from
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          persist-credentials: false

      - name: Authenticate with github
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.bump-version.outputs.new_version }}
          release_name: Release ${{ needs.bump-version.outputs.new_version }}
          body: |
            Release ${{ github.event.inputs.release_type }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: create-release
    runs-on: ubuntu-latest
    environment:
      name: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release.outputs.release_branch }}

      - name: Create release branch
        id: create-release-branch
        run: |
          git checkout -b release/$RELEASE_VERSION
          git tag $RELEASE_VERSION
          git push origin release/$RELEASE_VERSION
          echo "release_branch=release/$RELEASE_VERSION" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_VERSION: ${{ needs.bump-version.outputs.new_version }}

      - name: Deploy to production
        run: echo "Deploying to production..."

  cleanup-failed-deployment:
    needs: [ create-release, deploy ]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_VERSION: ${{ needs.bump-version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Delete GitHub release
        run: |
          release_id=$(curl -s -H "Authorization: token ${{ github.env.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.env.RELEASE_VERSION }} \
            | jq -r '.id')
          if [ "$release_id" != "null" ]; then
            curl -X DELETE -H "Authorization: token ${{ github.env.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/releases/$release_id
            echo "Release ${{ github.env.RELEASE_VERSION }} deleted."
          else
            echo "Release ${{ github.env.RELEASE_VERSION }} not found."
          fi
      - name: Delete release branch
        run: |
          git branch -D ${{ needs.create-release.outputs.release_branch }}